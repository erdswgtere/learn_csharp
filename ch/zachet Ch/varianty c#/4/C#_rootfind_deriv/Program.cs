/*****************************************************
******************************************************
**                                                  **
**  Программа вычисления корня функции с заданной   **
**  точностью с помощью комбинированного метода     **
**  Ньютона.                                        **
**                                                  **
**  Описание входных и выходных данных:             **
**  x1 - первая граница отрезка                     **
**  x2 - вторая граница отрезка                     **
**  eps - погрешность 10^-6(0,000001)               **
**  n - счётчик итераций                            **
**  stopwatch - объект класса stopwatch для вывода  **
**  времени выполения программ                      **
**  dx1- преращение аргумента                       **
**  deriv - вычисление численного значения          **
**  производной с помощью её общей формулы          **
**                                                  **
**  Вывод:                                          **
**  n - счётчик итераций                            **
**  x - уточнённый корень                           **
**  elapsedTime- время выполнения программы         **
**                                                  **
**                                                  ** 
**  Выполнил: студент 2 курса ЕПК гр.               **
**                                                  ** 
**  Проверил: преподаватель (числ. мет.) Фомин А. Т.**
**                                                  **
******************************************************
*****************************************************/
// НЕ ЗАБУДЬ ДОПИСАТЬ ГРУППУ И СВОЁ ИМЯ В ШАПКУ!
// НЕ ЗАБУДЬ УДАЛИТЬ ЭТИ КОМЕНТАРИИ (КРОМЕ ШАПКИ:))!

using System.Diagnostics;
var sw = new Stopwatch();
Stopwatch stopWatch = new Stopwatch();

double f(double x){
    return Math.Pow(x, 3)+ 2 * Math.Pow(x, 2)- 15*x - 36; // поменять функцию на свою
}
double c, x1, x2, r, d, eps; 
Console.Write("a = ");// тут ввод границ отрезка(где есть корень, корень находится там где график пересекает ось X, короче лучше его построить и посмотреть) если не будет возможности построить график в каком нибудь онлайн калькуляторе можно построить в файле октавы рядом.
x1 = Convert.ToDouble(Console.ReadLine());
Console.Write("b = ");
x2 = Convert.ToDouble(Console.ReadLine());
Console.Write("eps = ");
eps = Convert.ToDouble(Console.ReadLine());
c = x1;
double dx1 = 1E-13;
double deriv;
deriv = (f(x1+dx1)-f(x1))/dx1; // ПРОИЗВОДНУЮ ВЫЧИСЛЯТЬ НЕ НУЖНО, КТО-ТО ДОДУМАЛСЯ КАК ДЕЛАТЬ АВТОМАТИЧЕСКОЕ ВЫЧИСЛЕНИЕ ПРОИЗВОДНОЙ:)
int n = 0;
stopWatch.Start();
do{
   x1 -= f(x1) / deriv; //(Math.Exp(0.5 * Math.Pow(x1, 2)) * Math.Log(x1) + Math.Exp(0.5 * Math.Pow(x1, 2)) + x1) / Math.Exp(0.5 * Math.Pow(x1, 2));
   x2 = (c * f(x2) - x2 * f(c)) / (f(x2) - f(c));
   r = (x1 + x2)/2;
   d = (x1 - x2)/2; 
   n++;
} while(Math.Abs(d) > eps);
stopWatch.Stop();
TimeSpan ts = stopWatch.Elapsed;
Console.WriteLine($"x = {r:f4}; кол-во повторений {n:d1}");
string elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}.{4:00}",
ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10, ts.Nanoseconds / 10);
Console.WriteLine("RunTime " + elapsedTime);